{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","response","json","PostsList","userId","onSelect","selectedPostId","useState","posts","setPosts","useEffect","data","getUserPosts","isOpened","postId","className","map","post","title","type","onClick","id","removeComment","commentId","method","NewCommentForm","reload","name","setName","email","setEmail","body","setBody","errors","setErrors","onSubmit","event","preventDefault","state","JSON","stringify","addComment","placeholder","value","onChange","target","PostDetails","setPost","comments","setComments","hasCommentsHidden","setHasCommentsHidden","loadComments","getPostComments","commentsFromServer","getPostDetails","postFromServer","length","has","comment","deleteComment","App","selectedUserId","setSelectedUserId","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b2eb9b4.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json());\n};\n","import { FC, useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport { Post } from '../../types/post';\nimport './PostsList.scss';\n\ninterface Props {\n  userId: number,\n  onSelect: (postId: number) => void,\n  selectedPostId: number\n}\n\nexport const PostsList: FC<Props> = ({ userId, onSelect, selectedPostId }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getPosts().then(data => setPosts(data));\n    } else {\n      getUserPosts(userId).then(data => setPosts(data));\n    }\n  }, [userId]);\n\n  const isOpened = (postId: number) => selectedPostId === postId;\n\n  const postDetailsToggle = (postId: number) => {\n    if (isOpened(postId)) {\n      onSelect(0);\n    } else {\n      onSelect(postId);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => postDetailsToggle(post.id)}\n            >\n              {isOpened(post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = (userId: number) => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: number) => request(`/posts/${postId}`);\n","import { Comment } from '../types/comment';\nimport { request } from './api';\n\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const addComment = ({\n  postId, name, email, body,\n}: Comment) => request('/comments', {\n  method: 'POST',\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n\nexport const removeComment = (commentId: number) => request(`/comments/${commentId}`, {\n  method: 'DELETE',\n});\n","import { FC, FormEvent, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  reload: () => void;\n}\n\ninterface Errors {\n  name: string,\n  email: string,\n  body: string\n}\n\nexport const NewCommentForm: FC<Props> = ({ postId, reload }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [errors, setErrors] = useState((): Errors => ({\n    name: '',\n    email: '',\n    body: '',\n  }));\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name) {\n      setErrors(state => ({\n        ...state,\n        name: 'Please, give us your name',\n      }));\n    }\n\n    if (!email) {\n      setErrors(state => ({\n        ...state,\n        email: 'Please, give us your email',\n      }));\n    }\n\n    if (!body) {\n      setErrors(state => ({\n        ...state,\n        body: 'Please, give us your body',\n      }));\n    }\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    reload();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n            setErrors(state => ({\n              ...state,\n              name: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.name}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n            setErrors(state => ({\n              ...state,\n              email: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.email}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n            setErrors(state => ({\n              ...state,\n              body: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.body}</p>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment } from '../../types/comment';\nimport { Post } from '../../types/post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postId: number\n}\n\nexport const PostDetails: FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasCommentsHidden, setHasCommentsHidden] = useState(false);\n\n  const loadComments = () => {\n    getPostComments(postId)\n      .then(commentsFromServer => setComments(commentsFromServer));\n  };\n\n  // const loadComments = useCallback(() => {\n  //   getPostComments(postId)\n  //     .then(commentsFromServer => setComments(commentsFromServer));\n  // }, [postId]);\n\n  const deleteComment = (commentId = 0) => {\n    removeComment(commentId);\n    loadComments();\n  };\n\n  useEffect(() => {\n    if (postId !== 0) {\n      getPostDetails(postId)\n        .then(postFromServer => setPost(postFromServer));\n      loadComments();\n    } else {\n      setPost(null);\n      setComments([]);\n    }\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {post && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {comments.length > 0 && (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setHasCommentsHidden(has => !has)}\n              >\n                {`${hasCommentsHidden ? 'show' : 'hide'} ${comments.length} comments`}\n              </button>\n\n              {!hasCommentsHidden && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li className=\"PostDetails__list-item\" key={comment.id}>\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => deleteComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={post.id}\n                reload={loadComments}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import { ChangeEvent, FC, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPost = (id: number) => setSelectedPostId(id);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            onSelect={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}