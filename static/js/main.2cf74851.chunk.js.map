{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","response","json","responce","Error","status","statusText","PostsList","userId","onSelect","selectedPostId","useState","posts","setPosts","useEffect","data","getUserPosts","isOpened","postId","className","map","post","title","type","onClick","id","removeComment","commentId","method","NewCommentForm","setComment","name","setName","email","setEmail","body","setBody","errors","setErrors","onSubmit","event","preventDefault","state","headers","JSON","stringify","addComment","comment","placeholder","value","onChange","target","PostDetails","setPost","comments","setComments","hasCommentsHidden","setHasCommentsHidden","getPostDetails","postFromServer","getPostComments","commentsFromServer","length","has","item","filter","deleteComment","App","selectedUserId","setSelectedUserId","setSelectedPostId","users","setUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cf74851.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(BASE_URL + url, options)\n    .then(response => response.json())\n    .then(responce => {\n      if (responce.Error) {\n        throw new Error(`${responce.status} - ${responce.statusText}`);\n      }\n\n      return responce;\n    });\n};\n","import { FC, useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport { Post } from '../../types/post';\nimport './PostsList.scss';\n\ninterface Props {\n  userId: number,\n  onSelect: (postId: number) => void,\n  selectedPostId: number\n}\n\nexport const PostsList: FC<Props> = ({ userId, onSelect, selectedPostId }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getPosts().then(data => setPosts(data));\n    } else {\n      getUserPosts(userId).then(data => setPosts(data));\n    }\n  }, [userId]);\n\n  const isOpened = (postId: number) => selectedPostId === postId;\n\n  const postDetailsToggle = (postId: number) => {\n    if (isOpened(postId)) {\n      onSelect(0);\n    } else {\n      onSelect(postId);\n    }\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => postDetailsToggle(post.id)}\n            >\n              {isOpened(post.id) ? 'Close' : 'Open'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { Post } from '../types/post';\nimport { request } from './api';\n\nexport const getPosts = (): Promise<Post[]> => request('/posts');\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: number): Promise<Post> => request(`/posts/${postId}`);\n","import { Comment } from '../types/comment';\nimport { request } from './api';\n\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const addComment = ({\n  postId, name, email, body,\n}: Comment) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n\nexport const removeComment = (commentId: number) => request(`/comments/${commentId}`, {\n  method: 'DELETE',\n});\n","import { FC, FormEvent, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport { Comment } from '../../types/comment';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  setComment: (comment: Comment) => void;\n}\n\ninterface Errors {\n  name: string,\n  email: string,\n  body: string\n}\n\nexport const NewCommentForm: FC<Props> = ({ postId, setComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [errors, setErrors] = useState((): Errors => ({\n    name: '',\n    email: '',\n    body: '',\n  }));\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name) {\n      setErrors(state => ({\n        ...state,\n        name: 'Please, give us your name',\n      }));\n    }\n\n    if (!email) {\n      setErrors(state => ({\n        ...state,\n        email: 'Please, give us your email',\n      }));\n    }\n\n    if (!body) {\n      setErrors(state => ({\n        ...state,\n        body: 'Please, give us your body',\n      }));\n    }\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    }).then(comment => {\n      setComment(comment);\n      resetForm();\n    });\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n            setErrors(state => ({\n              ...state,\n              name: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.name}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n            setErrors(state => ({\n              ...state,\n              email: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.email}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n            setErrors(state => ({\n              ...state,\n              body: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.body}</p>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Comment } from '../../types/comment';\nimport { Post } from '../../types/post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postId: number\n}\n\nexport const PostDetails: FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasCommentsHidden, setHasCommentsHidden] = useState(false);\n\n  const setComment = (comment: Comment) => setComments([...comments, comment]);\n\n  const deleteComment = (commentId = 0) => {\n    removeComment(commentId).then((item => {\n      if (item) {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      }\n    }));\n  };\n\n  useEffect(() => {\n    if (postId !== 0) {\n      getPostDetails(postId)\n        .then(postFromServer => setPost(postFromServer));\n      getPostComments(postId)\n        .then(commentsFromServer => setComments(commentsFromServer));\n    } else {\n      setPost(null);\n      setComments([]);\n    }\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {post && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {comments.length > 0 && (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setHasCommentsHidden(has => !has)}\n              >\n                {`${hasCommentsHidden ? 'show' : 'hide'} ${comments.length} comments`}\n              </button>\n\n              {!hasCommentsHidden && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li className=\"PostDetails__list-item\" key={comment.id}>\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => deleteComment(comment.id)}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n\n            </section>\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={post.id}\n                setComment={setComment}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import {\n  ChangeEvent, FC, useEffect, useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { User } from './types/user';\nimport { getUsers } from './api/users';\n\nconst App: FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers().then(data => setUsers(data));\n  }, []);\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPost = (id: number) => setSelectedPostId(id);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            onSelect={selectPost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { User } from '../types/user';\nimport { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => request('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}